//
//  NetworkService.swift
//  Core
//
//  Created by Ïù¥ÏßÄÌõà on 7/3/25.
//  Copyright ¬© 2025 com.noweekend. All rights reserved.
//

import Alamofire
import Foundation
import DIContainer

public protocol NWNetworkServiceProtocol {
    func get<T: Decodable>(endpoint: String, parameters: [String: Any]?) async throws -> T
    func post<T: Decodable>(endpoint: String, parameters: [String: Any]?) async throws -> T
    func patch<T: Decodable>(endpoint: String, parameters: [String: Any]?) async throws -> T
    func put<T: Decodable>(endpoint: String, parameters: [String: Any]?) async throws -> T
    func delete<T: Decodable>(endpoint: String) async throws -> T
}

public class NWNetworkService: NWNetworkServiceProtocol {
    private let baseURL: String
    private let session: Session
    private var authToken: String?
    
    public init(baseURL: String = Config.baseURL, authToken: String? = nil) {
        self.baseURL = baseURL
        self.authToken = authToken
        
        var headers: [String: String] = [
            "Content-Type": "application/json",
            "Accept": "application/json"
        ]
        
        if let token = authToken {
            headers["Authorization"] = "Bearer \(token)"
        }
        
        let configuration = URLSessionConfiguration.default
        configuration.httpAdditionalHeaders = headers
        self.session = Session(configuration: configuration)
    }
    
    public func updateAuthToken(_ token: String?) {
        self.authToken = token
    }
    
    public func get<T: Decodable>(endpoint: String, parameters: [String: Any]?) async throws -> T {
        try await request(endpoint: endpoint, method: .get, parameters: parameters)
    }
    
    public func post<T: Decodable>(endpoint: String, parameters: [String: Any]?) async throws -> T {
        try await request(endpoint: endpoint, method: .post, parameters: parameters)
    }
    
    public func put<T: Decodable>(endpoint: String, parameters: [String: Any]?) async throws -> T {
        try await request(endpoint: endpoint, method: .put, parameters: parameters)
    }
    
    public func delete<T: Decodable>(endpoint: String) async throws -> T {
        try await request(endpoint: endpoint, method: .delete, parameters: nil)
    }
    
    public func patch<T: Decodable>(endpoint: String, parameters: [String: Any]?) async throws -> T {
        return try await request(endpoint: endpoint, method: .patch, parameters: parameters)
    }
    
    private func getCurrentToken() -> String? {
        if let runtimeToken = authToken, !runtimeToken.isEmpty {
            return runtimeToken
        }
        
        do {
            let tokenManager = DIContainer.shared.resolve(TokenManagerInterface.self)
            if let token = tokenManager.getAccessToken(), !token.isEmpty {
                return token
            }
        }
        
        if let savedToken = UserDefaults.standard.string(forKey: "access_token"), !savedToken.isEmpty {
            return savedToken
        }
        
        return Config.tempAccessToken
    }
    
    
    // MARK: - Main Request Method
    
    private func request<T: Decodable>(
        endpoint: String,
        method: HTTPMethod,
        parameters: [String: Any]?
    ) async throws -> T {
        let url = baseURL + endpoint
        let startTime = Date()
        
        print("üåê ÎÑ§Ìä∏ÏõåÌÅ¨ ÏöîÏ≤≠ ÏãúÏûë:")
        print("   - URL: \(url)")
        print("   - Method: \(method.rawValue)")
        print("   - Expected Response Type: \(T.self)")
        
        if let params = parameters {
            print("   - Parameters:")
            params.forEach { key, value in
                if key.lowercased().contains("token") || key.lowercased().contains("code") {
                    print("     - \(key): \(String(describing: value).prefix(20))...")
                } else {
                    print("     - \(key): \(value)")
                }
            }
        }
        
        var headers: HTTPHeaders = [
            "Content-Type": "application/json",
            "Accept": "application/json"
        ]
        
        // ÌÜ†ÌÅ∞ Ïö∞ÏÑ†ÏàúÏúÑ: UserDefaults ‚Üí Ï¥àÍ∏∞Ìôî ÌÜ†ÌÅ∞ ‚Üí ÏûÑÏãú ÌÜ†ÌÅ∞
        if let token = getCurrentToken() {
            headers["Authorization"] = "Bearer \(token)"
        }
        
        return try await withCheckedThrowingContinuation { continuation in
            let encoding: ParameterEncoding = method == .get ? URLEncoding.default : JSONEncoding.default
            
            session.request(
                url,
                method: method,
                parameters: parameters,
                encoding: encoding,
                headers: headers
            )
            .validate()
            .responseData { response in
                let endTime = Date()
                let duration = endTime.timeIntervalSince(startTime)
                
                print("üåê ÎÑ§Ìä∏ÏõåÌÅ¨ ÏùëÎãµ ÏôÑÎ£å (ÏÜåÏöîÏãúÍ∞Ñ: \(String(format: "%.2f", duration))Ï¥à):")
                
                // HTTP ÏÉÅÌÉú ÏΩîÎìú Î°úÍπÖ
                if let httpResponse = response.response {
                    print("   - HTTP Status: \(httpResponse.statusCode)")
                    print("   - Headers:")
                    httpResponse.allHeaderFields.forEach { key, value in
                        print("     - \(key): \(value)")
                    }
                }
                
                // ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ Î°úÍπÖ
                if let data = response.data {
                    print("   - Response Size: \(data.count) bytes")
                    
                    // JSON ÏùëÎãµÏùÑ ÏùΩÍ∏∞ ÏâΩÍ≤å Ï∂úÎ†•
                    if let jsonString = self.prettyPrintJSON(data) {
                        print("   - Response JSON:")
                        print("     \(jsonString)")
                    } else {
                        print("   - Response Data (Ï≤´ 500Ïûê):")
                        if let string = String(data: data, encoding: .utf8) {
                            print("     \(string.prefix(500))")
                        }
                    }
                }
                
                switch response.result {
                case .success(let data):
                    do {
                        let decoder = JSONDecoder()
                        let decodedResponse = try decoder.decode(T.self, from: data)
                        print("‚úÖ ÎîîÏΩîÎî© ÏÑ±Í≥µ")
                        continuation.resume(returning: decodedResponse)
                    } catch {
                        print("‚ùå ÎîîÏΩîÎî© Ïã§Ìå®:")
                        print("   - Error: \(error)")
                        if let decodingError = error as? DecodingError {
                            self.logDecodingError(decodingError)
                        }
                        continuation.resume(throwing: NetworkError.decodingError)
                    }
                    
                case .failure(let error):
                    print("‚ùå ÎÑ§Ìä∏ÏõåÌÅ¨ ÏöîÏ≤≠ Ïã§Ìå®:")
                    print("   - Error Type: \(type(of: error))")
                    print("   - Error Description: \(error.localizedDescription)")
                    
                    let networkError = self.mapAlamofireError(error, responseData: response.data)
                    continuation.resume(throwing: networkError)
                }
            }
        }
    }
    
    // MARK: - Error Mapping
    
    private func mapAlamofireError(_ error: AFError, responseData: Data?) -> NetworkError {
        switch error {
        case .responseValidationFailed(let reason):
            return handleValidationFailure(reason, responseData: responseData)
        case .responseSerializationFailed(let reason):
            return handleSerializationFailure(reason)
        case .sessionTaskFailed(let underlyingError):
            return handleSessionTaskFailure(underlyingError)
        default:
            return .unknown(error)
        }
    }
    
    private func handleValidationFailure(
        _ reason: AFError.ResponseValidationFailureReason,
        responseData: Data?
    ) -> NetworkError {
        switch reason {
        case .unacceptableStatusCode(let statusCode):
            let serverMessage = extractServerErrorMessage(from: responseData, statusCode: statusCode)
            return .serverError("HTTP \(statusCode): \(serverMessage)")
        case .unacceptableContentType(let acceptableTypes, let responseType):
            return .serverError("ÏûòÎ™ªÎêú Content-Type: ÏòàÏÉÅ \(acceptableTypes), Ïã§Ï†ú \(responseType)")
        default:
            return .serverError("ÏùëÎãµ Í≤ÄÏ¶ù Ïã§Ìå®")
        }
    }
    
    private func handleSerializationFailure(_ reason: AFError.ResponseSerializationFailureReason) -> NetworkError {
        switch reason {
        case .decodingFailed:
            return .decodingError
        default:
            return .decodingError
        }
    }
    
    private func handleSessionTaskFailure(_ underlyingError: Error) -> NetworkError {
        guard let urlError = underlyingError as? URLError else {
            return .unknown(underlyingError)
        }
        
        switch urlError.code {
        case .notConnectedToInternet:
            return .serverError("Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî")
        case .timedOut:
            return .serverError("ÏöîÏ≤≠ ÏãúÍ∞ÑÏù¥ Ï¥àÍ≥ºÎêòÏóàÏäµÎãàÎã§")
        case .cannotFindHost:
            return .serverError("ÏÑúÎ≤ÑÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§")
        default:
            return .serverError("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò: \(urlError.localizedDescription)")
        }
    }
    
    private func extractServerErrorMessage(from data: Data?, statusCode: Int) -> String {
        guard let data = data else {
            return "ÏÑúÎ≤Ñ Ïò§Î•ò (ÏÉÅÌÉú ÏΩîÎìú: \(statusCode))"
        }
        
        if let errorMessage = parseJSONErrorMessage(data) {
            return errorMessage
        }
        
        if let responseString = String(data: data, encoding: .utf8) {
            return responseString.prefix(200).description
        }
        
        return "Ïïå Ïàò ÏóÜÎäî ÏÑúÎ≤Ñ Ïò§Î•ò (ÏÉÅÌÉú ÏΩîÎìú: \(statusCode))"
    }
    
    private func parseJSONErrorMessage(_ data: Data) -> String? {
        guard let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any] else {
            return nil
        }
        
        // ÏùºÎ∞òÏ†ÅÏù∏ ÏóêÎü¨ ÏùëÎãµ Íµ¨Ï°∞Îì§ ÌôïÏù∏
        if let error = json["error"] as? [String: Any],
           let message = error["message"] as? String {
            return message
        }
        
        if let message = json["message"] as? String {
            return message
        }
        
        if let detail = json["detail"] as? String {
            return detail
        }
        
        return nil
    }
    
    // MARK: - Debugging Helpers
    
    private func prettyPrintJSON(_ data: Data) -> String? {
        guard let jsonObject = try? JSONSerialization.jsonObject(with: data, options: []),
              let prettyData = try? JSONSerialization.data(withJSONObject: jsonObject, options: .prettyPrinted),
              let prettyString = String(data: prettyData, encoding: .utf8) else {
            return nil
        }
        return prettyString
    }
    
    private func logDecodingError(_ error: DecodingError) {
        switch error {
        case .typeMismatch(let type, let context):
            print("     - Type Mismatch: ÏòàÏÉÅ \(type)")
            print("     - Path: \(context.codingPath.map { $0.stringValue }.joined(separator: "."))")
            print("     - Description: \(context.debugDescription)")
            
        case .valueNotFound(let type, let context):
            print("     - Value Not Found: \(type)")
            print("     - Path: \(context.codingPath.map { $0.stringValue }.joined(separator: "."))")
            print("     - Description: \(context.debugDescription)")
            
        case .keyNotFound(let key, let context):
            print("     - Key Not Found: \(key.stringValue)")
            print("     - Path: \(context.codingPath.map { $0.stringValue }.joined(separator: "."))")
            print("     - Available Keys: \(context.debugDescription)")
            
        case .dataCorrupted(let context):
            print("     - Data Corrupted")
            print("     - Path: \(context.codingPath.map { $0.stringValue }.joined(separator: "."))")
            print("     - Description: \(context.debugDescription)")
            
        @unknown default:
            print("     - Unknown Decoding Error: \(error)")
        }
    }
}
